---
description: ALWAYS use this rule for anything related to Python, e.g. package management, running scripts, etc.
globs: 
alwaysApply: false
---
# UV Python Package Manager Guide

> Quick reference for essential UV commands

## Common commands

- To install specific a Python version, e.g. 3.11 use `uv python install 3.11`
- To list installed versions: `uv python list`
- To initialise a new project: `uv init`
- To sync from an existing `pyproject.toml` file: `uv sync`
- To add a new package: `uv add <package-name>`
- **Important** try not to edit the `pyproject.toml` file directly, just let uv manage that for us
- To run a script, use `uv run <script-name>`

## Best Practices

1. **Use uv add for dependencies** - Prefer `uv add` over manually editing dependencies in pyproject.toml
2. **Use sync after pulling changes** - Run `uv sync` after pulling changes with new dependencies
3. **Virtual environments** - UV automatically manages virtual environments
4. **Version pinning** - UV handles version resolution efficiently

## Troubleshooting

If you encounter issues:

1. Try running `uv sync --upgrade` to refresh all dependencies
2. Check your pyproject.toml for formatting issues
3. Ensure you're not mixing package managers (pip and UV) in the same project

